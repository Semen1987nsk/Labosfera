#!/bin/bash

# ==========================================
# –õ–ê–ë–û–°–§–ï–†–ê - –°–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Timeweb Cloud
# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
# ==========================================

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
print_header() {
    echo -e "${BLUE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${BLUE}‚ïë                     üöÄ –õ–ê–ë–û–°–§–ï–†–ê - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Timeweb Cloud                 ‚ïë${NC}"
    echo -e "${BLUE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
}

print_section() {
    echo -e "${CYAN}‚îÅ‚îÅ‚îÅ $1 ‚îÅ‚îÅ‚îÅ${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∏ Docker Compose
check_docker() {
    print_section "–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker"
    
    if command -v docker >/dev/null 2>&1; then
        print_success "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $(docker --version)"
    else
        print_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        return 1
    fi
    
    if command -v docker-compose >/dev/null 2>&1; then
        print_success "Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $(docker-compose --version)"
    else
        print_error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–º–æ–Ω–∞ Docker
    if docker info >/dev/null 2>&1; then
        print_success "Docker –¥–µ–º–æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        print_error "Docker –¥–µ–º–æ–Ω –Ω–µ –∑–∞–ø—É—â–µ–Ω!"
        return 1
    fi
    
    echo ""
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
check_containers() {
    print_section "–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    
    if [ ! -f "docker-compose.timeweb.yml" ]; then
        print_error "–§–∞–π–ª docker-compose.timeweb.yml –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        return 1
    fi
    
    echo "üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
    docker-compose -f docker-compose.timeweb.yml ps
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    local containers=("labosfera_db" "labosfera_backend" "labosfera_frontend" "labosfera_nginx")
    
    for container in "${containers[@]}"; do
        if docker ps --format "table {{.Names}}" | grep -q "$container"; then
            local status=$(docker inspect --format='{{.State.Status}}' "$container" 2>/dev/null)
            local health=$(docker inspect --format='{{.State.Health.Status}}' "$container" 2>/dev/null)
            
            if [ "$status" = "running" ]; then
                if [ "$health" = "healthy" ] || [ "$health" = "<no value>" ]; then
                    print_success "$container –∑–∞–ø—É—â–µ–Ω –∏ –∑–¥–æ—Ä–æ–≤"
                else
                    print_warning "$container –∑–∞–ø—É—â–µ–Ω, –Ω–æ —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è: $health"
                fi
            else
                print_error "$container –Ω–µ –∑–∞–ø—É—â–µ–Ω (—Å—Ç–∞—Ç—É—Å: $status)"
            fi
        else
            print_error "$container –Ω–µ –Ω–∞–π–¥–µ–Ω"
        fi
    done
    
    echo ""
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å–∏—Å—Ç–µ–º—ã
check_system_resources() {
    print_section "–†–µ—Å—É—Ä—Å—ã —Å–∏—Å—Ç–µ–º—ã"
    
    # CPU
    local cpu_usage=$(top -bn1 | grep "Cpu(s)" | sed "s/.*, *\([0-9.]*\)%* id.*/\1/" | awk '{print 100 - $1}')
    echo -e "üñ•Ô∏è  CPU –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ${YELLOW}${cpu_usage}%${NC}"
    
    # –ü–∞–º—è—Ç—å
    local mem_info=$(free -h | awk '/^Mem:/ {print $3 "/" $2}')
    local mem_percent=$(free | awk '/^Mem:/ {printf("%.1f"), $3/$2 * 100.0}')
    echo -e "üß† –ü–∞–º—è—Ç—å: ${YELLOW}${mem_info} (${mem_percent}%)${NC}"
    
    # –î–∏—Å–∫
    local disk_info=$(df -h / | awk 'NR==2 {print $3 "/" $2 " (" $5 ")"}')
    echo -e "üíæ –î–∏—Å–∫ /: ${YELLOW}${disk_info}${NC}"
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã
    local load_avg=$(uptime | awk -F'load average:' '{print $2}')
    echo -e "üìà –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã:${YELLOW}${load_avg}${NC}"
    
    # –ê–ø—Ç–∞–π–º
    local uptime_info=$(uptime -p)
    echo -e "‚è±Ô∏è  –ê–ø—Ç–∞–π–º: ${GREEN}${uptime_info}${NC}"
    
    echo ""
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ Docker
check_docker_resources() {
    print_section "–†–µ—Å—É—Ä—Å—ã Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    
    echo "üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤:"
    docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.MemPerc}}\t{{.NetIO}}\t{{.BlockIO}}"
    echo ""
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
check_services() {
    print_section "–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if docker exec labosfera_db pg_isready -U labosfera -d labosfera >/dev/null 2>&1; then
        print_success "PostgreSQL –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        print_error "PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Backend API
    if curl -f http://localhost:8000/api/health/ >/dev/null 2>&1; then
        print_success "Backend API –¥–æ—Å—Ç—É–ø–µ–Ω (http://localhost:8000)"
    else
        print_error "Backend API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Frontend
    if curl -f http://localhost:3000/ >/dev/null 2>&1; then
        print_success "Frontend –¥–æ—Å—Ç—É–ø–µ–Ω (http://localhost:3000)"
    else
        print_error "Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Nginx
    if curl -f http://localhost/health/ >/dev/null 2>&1; then
        print_success "Nginx –¥–æ—Å—Ç—É–ø–µ–Ω (http://localhost)"
    else
        print_error "Nginx –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTPS (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
    if curl -f -k https://localhost/health/ >/dev/null 2>&1; then
        print_success "HTTPS –¥–æ—Å—Ç—É–ø–µ–Ω (https://localhost)"
    else
        print_warning "HTTPS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω SSL)"
    fi
    
    echo ""
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –Ω–∞ –æ—à–∏–±–∫–∏
check_logs() {
    print_section "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –Ω–∞ –æ—à–∏–±–∫–∏"
    
    local containers=("labosfera_db" "labosfera_backend" "labosfera_frontend" "labosfera_nginx")
    
    for container in "${containers[@]}"; do
        if docker ps --format "{{.Names}}" | grep -q "$container"; then
            local errors=$(docker logs "$container" --since="1h" 2>&1 | grep -i -E "(error|exception|fail|fatal)" | wc -l)
            if [ "$errors" -gt 0 ]; then
                print_warning "$container: –Ω–∞–π–¥–µ–Ω–æ $errors –æ—à–∏–±–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å"
            else
                print_success "$container: –æ—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å"
            fi
        fi
    done
    
    echo ""
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
check_ssl() {
    print_section "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã"
    
    if [ -f "/opt/labosfera/ssl/letsencrypt/live/labosfera.ru/fullchain.pem" ]; then
        local expiry=$(openssl x509 -in /opt/labosfera/ssl/letsencrypt/live/labosfera.ru/fullchain.pem -noout -enddate | cut -d= -f2)
        local expiry_epoch=$(date -d "$expiry" +%s)
        local current_epoch=$(date +%s)
        local days_left=$(( (expiry_epoch - current_epoch) / 86400 ))
        
        if [ "$days_left" -gt 30 ]; then
            print_success "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω ($days_left –¥–Ω–µ–π –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è)"
        elif [ "$days_left" -gt 7 ]; then
            print_warning "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ $days_left –¥–Ω–µ–π"
        else
            print_error "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ $days_left –¥–Ω–µ–π!"
        fi
    else
        print_warning "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
    
    echo ""
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—ç–∫–∞–ø–æ–≤
check_backups() {
    print_section "–ë—ç–∫–∞–ø—ã"
    
    local backup_dir="/opt/labosfera/backups"
    if [ -d "$backup_dir" ]; then
        local latest_backup=$(find "$backup_dir" -name "*.sql" -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -d' ' -f2-)
        if [ -n "$latest_backup" ]; then
            local backup_date=$(date -r "$latest_backup" '+%Y-%m-%d %H:%M:%S')
            local backup_age=$(( ($(date +%s) - $(date -r "$latest_backup" +%s)) / 86400 ))
            
            if [ "$backup_age" -le 1 ]; then
                print_success "–ü–æ—Å–ª–µ–¥–Ω–∏–π –±—ç–∫–∞–ø: $backup_date (—Å–≤–µ–∂–∏–π)"
            elif [ "$backup_age" -le 7 ]; then
                print_warning "–ü–æ—Å–ª–µ–¥–Ω–∏–π –±—ç–∫–∞–ø: $backup_date ($backup_age –¥–Ω–µ–π –Ω–∞–∑–∞–¥)"
            else
                print_error "–ü–æ—Å–ª–µ–¥–Ω–∏–π –±—ç–∫–∞–ø: $backup_date ($backup_age –¥–Ω–µ–π –Ω–∞–∑–∞–¥) - —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–π!"
            fi
        else
            print_warning "–ë—ç–∫–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        fi
    else
        print_warning "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –±—ç–∫–∞–ø–æ–≤ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    fi
    
    echo ""
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–µ—Ç–∏ (Timeweb Cloud)
check_network() {
    print_section "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Ç–∏"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ—Ç–∫–ª–∏–∫–∞
    local ping_result=$(ping -c 4 8.8.8.8 | tail -1 | awk -F '/' '{print $5}')
    echo -e "üåê –°—Ä–µ–¥–Ω–∏–π ping –¥–æ 8.8.8.8: ${YELLOW}${ping_result}ms${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS
    local dns_time=$(dig @8.8.8.8 google.com | grep "Query time" | awk '{print $4}')
    echo -e "üîç DNS –∑–∞–ø—Ä–æ—Å: ${YELLOW}${dns_time}ms${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    local connections=$(ss -tuln | wc -l)
    echo -e "üîó –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: ${YELLOW}$connections${NC}"
    
    echo ""
}

# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
show_recommendations() {
    print_section "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è Timeweb Cloud"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
    local recommendations=0
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ swap
    local swap_usage=$(free | awk '/^Swap:/ {if ($2 > 0) printf("%.1f"), $3/$2 * 100.0; else print "0"}')
    if (( $(echo "$swap_usage > 10" | bc -l) )); then
        print_warning "–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ swap ($swap_usage%) - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ RAM"
        ((recommendations++))
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ CPU
    if (( $(echo "$cpu_usage > 80" | bc -l) )); then
        print_warning "–í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU ($cpu_usage%) - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∏–ª–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ"
        ((recommendations++))
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ
    local disk_usage=$(df / | awk 'NR==2 {print $5}' | sed 's/%//')
    if [ "$disk_usage" -gt 80 ]; then
        print_warning "–ú–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ ($disk_usage%) - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ—á–∏—Å—Ç–∫—É –∏–ª–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–∏—Å–∫–∞"
        ((recommendations++))
    fi
    
    if [ "$recommendations" -eq 0 ]; then
        print_success "–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è Timeweb Cloud!"
    fi
    
    echo ""
    print_info "üí° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è Timeweb Cloud:"
    echo "   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ NVMe –¥–∏—Å–∫–∏ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
    echo "   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ CDN –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤"
    echo "   ‚Ä¢ –í–∫–ª—é—á–∏—Ç–µ HTTP/2 –∏ Brotli —Å–∂–∞—Ç–∏–µ"
    echo "   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Redis –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"
    echo "   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å Grafana + Prometheus"
    echo ""
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
generate_report() {
    local report_file="/tmp/labosfera_monitoring_$(date +%Y%m%d_%H%M%S).txt"
    
    {
        echo "–õ–ê–ë–û–°–§–ï–†–ê - –û—Ç—á–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Timeweb Cloud"
        echo "–î–∞—Ç–∞: $(date)"
        echo "–•–æ—Å—Ç: $(hostname)"
        echo "========================================"
        echo ""
        
        echo "–°–ò–°–¢–ï–ú–ê:"
        echo "CPU: ${cpu_usage}%"
        echo "–ü–∞–º—è—Ç—å: ${mem_info} (${mem_percent}%)"
        echo "–î–∏—Å–∫: ${disk_info}"
        echo "–ê–ø—Ç–∞–π–º: ${uptime_info}"
        echo ""
        
        echo "DOCKER –ö–û–ù–¢–ï–ô–ù–ï–†–´:"
        docker-compose -f docker-compose.timeweb.yml ps
        echo ""
        
        echo "–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –†–ï–°–£–†–°–û–í:"
        docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.MemPerc}}"
        
    } > "$report_file"
    
    print_success "–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: $report_file"
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    print_header
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    check_docker || exit 1
    check_containers
    check_system_resources
    check_docker_resources
    check_services
    check_logs
    check_ssl
    check_backups
    check_network
    show_recommendations
    
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    if [ "$1" = "--report" ]; then
        generate_report
    fi
    
    echo -e "${GREEN}‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!${NC}"
    echo -e "${BLUE}üí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: $0 --report${NC}"
}

# –ó–∞–ø—É—Å–∫
main "$@"