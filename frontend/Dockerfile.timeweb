# ==========================================
# –õ–ê–ë–û–°–§–ï–†–ê - Dockerfile –¥–ª—è Next.js Frontend
# –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è Timeweb Cloud Ubuntu 24.04 LTS
# ==========================================

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π Node.js –æ–±—Ä–∞–∑ —Å Alpine
FROM node:20-alpine as base

# –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
LABEL maintainer="–õ–ê–ë–û–°–§–ï–†–ê <admin@labosfera.ru>"
LABEL description="Next.js Frontend –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"
LABEL version="1.0"
LABEL optimized-for="Timeweb Cloud Ubuntu 24.04 LTS"

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
RUN apk add --no-cache \
    libc6-compat \
    curl \
    bash \
    git

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ Node.js
ENV NODE_ENV=production \
    NEXT_TELEMETRY_DISABLED=1 \
    NPM_CONFIG_CACHE=/tmp/.npm \
    YARN_CACHE_FOLDER=/tmp/.yarn

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)
RUN addgroup --system --gid 1001 nodejs \
    && adduser --system --uid 1001 nextjs

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
WORKDIR /app

# ==========================================
# –°–¢–ê–î–ò–Ø –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô
# ==========================================
FROM base as deps

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
COPY package*.json ./
COPY yarn.lock* ./

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –¥–ª—è Timeweb Cloud
RUN if [ -f yarn.lock ]; then \
        yarn install --frozen-lockfile --production=false \
            --cache-folder /tmp/.yarn \
            --network-timeout 100000; \
    else \
        npm ci --legacy-peer-deps \
            --cache /tmp/.npm \
            --no-audit \
            --no-fund; \
    fi

# ==========================================
# –°–¢–ê–î–ò–Ø –°–ë–û–†–ö–ò
# ==========================================
FROM base as builder

WORKDIR /app

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç–∞–¥–∏–∏
COPY --from=deps /app/node_modules ./node_modules

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞
COPY . .

# –ê—Ä–≥—É–º–µ–Ω—Ç—ã —Å–±–æ—Ä–∫–∏
ARG NEXT_PUBLIC_API_URL=https://labosfera.ru/api
ARG NEXT_PUBLIC_SITE_URL=https://labosfera.ru

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Å–±–æ—Ä–∫–∏
ENV NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL \
    NEXT_PUBLIC_SITE_URL=$NEXT_PUBLIC_SITE_URL \
    NODE_ENV=production

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –¥–ª—è Timeweb Cloud
RUN cat > next.config.timeweb.mjs << 'EOF'
/** @type {import('next').NextConfig} */
const nextConfig = {
  // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
  productionBrowserSourceMaps: false,
  poweredByHeader: false,
  
  // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è NVMe –¥–∏—Å–∫–æ–≤ Timeweb Cloud
  images: {
    formats: ['image/avif', 'image/webp'],
    deviceSizes: [640, 750, 828, 1080, 1200, 1920, 2048, 3840],
    imageSizes: [16, 32, 48, 64, 96, 128, 256, 384],
    minimumCacheTTL: 86400, // 24 —á–∞—Å–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    dangerouslyAllowSVG: true,
    contentDispositionType: 'attachment',
    contentSecurityPolicy: "default-src 'self'; script-src 'none'; sandbox;",
  },
  
  // –°–∂–∞—Ç–∏–µ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç—Ä–∞—Ñ–∏–∫–∞ (1 Gbps –∫–∞–Ω–∞–ª Timeweb)
  compress: true,
  
  // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è JavaScript
  swcMinify: true,
  modularizeImports: {
    '@mui/icons-material': {
      transform: '@mui/icons-material/{{member}}',
    },
    'lodash': {
      transform: 'lodash/{{member}}',
    },
  },
  
  // –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  experimental: {
    optimizeCss: true,
    optimizePackageImports: ['@mui/material', '@mui/icons-material'],
    serverMinification: true,
    serverSourceMaps: false,
  },
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã–≤–æ–¥–∞ –¥–ª—è Docker
  output: 'standalone',
  
  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
  headers: async () => [
    {
      source: '/(.*)',
      headers: [
        {
          key: 'X-Frame-Options',
          value: 'DENY',
        },
        {
          key: 'X-Content-Type-Options',
          value: 'nosniff',
        },
        {
          key: 'Referrer-Policy',
          value: 'strict-origin-when-cross-origin',
        },
        {
          key: 'Permissions-Policy',
          value: 'camera=(), microphone=(), geolocation=()',
        },
      ],
    },
  ],
  
  // –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏–µ URL –¥–ª—è API
  rewrites: async () => [
    {
      source: '/api/backend/:path*',
      destination: process.env.NEXT_PUBLIC_API_URL + '/:path*',
    },
  ],
  
  // –†–µ–¥–∏—Ä–µ–∫—Ç—ã
  redirects: async () => [
    {
      source: '/home',
      destination: '/',
      permanent: true,
    },
  ],
};

export default nextConfig;
EOF

# –ó–∞–º–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–ª—è Timeweb
RUN mv next.config.timeweb.mjs next.config.mjs

# –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
RUN if [ -f yarn.lock ]; then \
        yarn build; \
    else \
        npm run build; \
    fi

# ==========================================
# –°–¢–ê–î–ò–Ø –ü–†–û–î–ê–ö–®–ï–ù–ê
# ==========================================
FROM base as production

WORKDIR /app

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è nextjs
USER nextjs

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
COPY --from=builder /app/public ./public

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ standalone —Å–±–æ—Ä–∫–∏
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# –°–æ–∑–¥–∞–Ω–∏–µ health check —Å–∫—Ä–∏–ø—Ç–∞
USER root
RUN cat > /app/healthcheck.js << 'EOF'
const http = require('http');

const options = {
  hostname: 'localhost',
  port: 3000,
  path: '/api/health',
  method: 'GET',
  timeout: 5000
};

const req = http.request(options, (res) => {
  if (res.statusCode === 200) {
    console.log('‚úÖ Frontend healthy');
    process.exit(0);
  } else {
    console.log(`‚ùå Frontend unhealthy: ${res.statusCode}`);
    process.exit(1);
  }
});

req.on('error', (error) => {
  console.log(`‚ùå Health check failed: ${error.message}`);
  process.exit(1);
});

req.on('timeout', () => {
  console.log('‚ùå Health check timeout');
  req.destroy();
  process.exit(1);
});

req.end();
EOF

# –°–æ–∑–¥–∞–Ω–∏–µ entrypoint —Å–∫—Ä–∏–ø—Ç–∞
RUN cat > /app/entrypoint.sh << 'EOF' && chmod +x /app/entrypoint.sh
#!/bin/bash
set -e

echo "üöÄ –õ–ê–ë–û–°–§–ï–†–ê - –ó–∞–ø—É—Å–∫ Next.js Frontend –Ω–∞ Timeweb Cloud"
echo "=================================================="

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
log "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
if [ -z "$NEXT_PUBLIC_API_URL" ]; then
    log "‚ö†Ô∏è  NEXT_PUBLIC_API_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
    export NEXT_PUBLIC_API_URL="https://labosfera.ru/api"
fi

if [ -z "$NEXT_PUBLIC_SITE_URL" ]; then
    log "‚ö†Ô∏è  NEXT_PUBLIC_SITE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
    export NEXT_PUBLIC_SITE_URL="https://labosfera.ru"
fi

log "‚úÖ API URL: $NEXT_PUBLIC_API_URL"
log "‚úÖ Site URL: $NEXT_PUBLIC_SITE_URL"

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ backend
log "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Backend API..."
while ! curl -f "$NEXT_PUBLIC_API_URL/health/" > /dev/null 2>&1; do
    log "Backend API –Ω–µ –≥–æ—Ç–æ–≤, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥..."
    sleep 5
done
log "‚úÖ Backend API –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
log "üåê –ó–∞–ø—É—Å–∫ Next.js —Å–µ—Ä–≤–µ—Ä–∞..."
log "üéØ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è Timeweb Cloud (NVMe + 1 Gbps)"
log "=================================================="

exec "$@"
EOF

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
RUN chown nextjs:nodejs /app/healthcheck.js /app/entrypoint.sh

# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è nextjs
USER nextjs

# –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ—Ä—Ç–∞
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD node /app/healthcheck.js

# Entrypoint –∏ –∫–æ–º–∞–Ω–¥–∞
ENTRYPOINT ["/app/entrypoint.sh"]
CMD ["node", "server.js"]

# ==========================================
# –°–¢–ê–î–ò–Ø –†–ê–ó–†–ê–ë–û–¢–ö–ò
# ==========================================
FROM base as development

WORKDIR /app

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
COPY package*.json ./
COPY yarn.lock* ./

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤–∫–ª—é—á–∞—è dev
RUN if [ -f yarn.lock ]; then \
        yarn install --frozen-lockfile \
            --cache-folder /tmp/.yarn \
            --network-timeout 100000; \
    else \
        npm ci --legacy-peer-deps \
            --cache /tmp/.npm \
            --no-audit \
            --no-fund; \
    fi

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞
COPY --chown=nextjs:nodejs . .

# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è nextjs
USER nextjs

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
CMD ["npm", "run", "dev"]

# ==========================================
# –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –î–õ–Ø TIMEWEB CLOUD
# ==========================================

# ‚úÖ –ú–Ω–æ–≥–æ—Å—Ç—É–ø–µ–Ω—á–∞—Ç–∞—è —Å–±–æ—Ä–∫–∞ –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–∞
# ‚úÖ Node.js 20 –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
# ‚úÖ Alpine Linux –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏
# ‚úÖ Standalone —Å–±–æ—Ä–∫–∞ Next.js
# ‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è NVMe –¥–∏—Å–∫–æ–≤
# ‚úÖ Health checks –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
# ‚úÖ –°–∂–∞—Ç–∏–µ –∏ –º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç—Ä–∞—Ñ–∏–∫–∞
# ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (non-root –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
# ‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
# ‚úÖ SWC –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏

# –°–ë–û–†–ö–ê:
# docker build -f Dockerfile.timeweb -t labosfera-frontend:timeweb .

# –†–ê–ó–†–ê–ë–û–¢–ö–ê:
# docker build -f Dockerfile.timeweb --target development -t labosfera-frontend:dev .

# –ü–†–û–î–ê–ö–®–ï–ù:
# docker build -f Dockerfile.timeweb --target production -t labosfera-frontend:prod .