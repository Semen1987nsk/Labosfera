# ==========================================
# ЛАБОСФЕРА - Docker Compose для Timeweb Cloud
# Оптимизировано для продакшена на Ubuntu 24.04 LTS
# ==========================================

version: '3.8'

# Сети для изоляции сервисов
networks:
  frontend-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/24
  backend-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/24

# Тома для персистентных данных
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/labosfera/data/postgres
  
  static_files:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/labosfera/data/static
  
  media_files:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/labosfera/data/media
  
  nginx_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/labosfera/logs/nginx
  
  letsencrypt:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/labosfera/ssl/letsencrypt

# Сервисы
services:
  # PostgreSQL База данных
  db:
    image: postgres:15-alpine
    container_name: labosfera_db
    restart: unless-stopped
    
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-labosfera}
      POSTGRES_USER: ${POSTGRES_USER:-labosfera}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=ru_RU.UTF-8"
    
    volumes:
      - postgres_data:/var/lib/postgresql/data
    
    networks:
      - backend-network
    
    ports:
      - "127.0.0.1:5432:5432"
    
    # Оптимизация PostgreSQL для Timeweb Cloud
    command: >
      postgres
      -c max_connections=100
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c max_worker_processes=4
      -c max_parallel_workers_per_gather=2
      -c max_parallel_workers=4
      -c max_parallel_maintenance_workers=2
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-labosfera} -d ${POSTGRES_DB:-labosfera}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Django Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.timeweb
    container_name: labosfera_backend
    restart: unless-stopped
    
    depends_on:
      db:
        condition: service_healthy
    
    environment:
      - DEBUG=False
      - DJANGO_SETTINGS_MODULE=labosfera_project.settings_timeweb
      - DATABASE_URL=postgresql://${POSTGRES_USER:-labosfera}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-labosfera}
      - POSTGRES_DB=${POSTGRES_DB:-labosfera}
      - POSTGRES_USER=${POSTGRES_USER:-labosfera}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-labosfera.ru,www.labosfera.ru}
      - CSRF_TRUSTED_ORIGINS=${CSRF_TRUSTED_ORIGINS:-https://labosfera.ru,https://www.labosfera.ru}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-https://labosfera.ru,https://www.labosfera.ru}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
    
    volumes:
      - static_files:/app/staticfiles
      - media_files:/app/media
      - ./backend/logs:/app/logs
    
    networks:
      - backend-network
      - frontend-network
    
    ports:
      - "127.0.0.1:8000:8000"
    
    # Оптимизация Gunicorn для Timeweb Cloud
    command: >
      gunicorn labosfera_project.wsgi:application
      --bind 0.0.0.0:8000
      --workers 4
      --worker-class gevent
      --worker-connections 1000
      --max-requests 1000
      --max-requests-jitter 100
      --timeout 30
      --keep-alive 2
      --log-level info
      --access-logfile -
      --error-logfile -
      --capture-output
      --enable-stdio-inheritance
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.timeweb
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-https://labosfera.ru/api}
        NEXT_PUBLIC_SITE_URL: ${NEXT_PUBLIC_SITE_URL:-https://labosfera.ru}
    container_name: labosfera_frontend
    restart: unless-stopped
    
    depends_on:
      backend:
        condition: service_healthy
    
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-https://labosfera.ru/api}
      - NEXT_PUBLIC_SITE_URL=${NEXT_PUBLIC_SITE_URL:-https://labosfera.ru}
      - NEXTAUTH_URL=${NEXTAUTH_URL:-https://labosfera.ru}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
    
    networks:
      - frontend-network
    
    ports:
      - "127.0.0.1:3000:3000"
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: labosfera_nginx
    restart: unless-stopped
    
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
    
    ports:
      - "80:80"
      - "443:443"
    
    volumes:
      - ./nginx-timeweb.conf:/etc/nginx/nginx.conf:ro
      - static_files:/app/staticfiles:ro
      - media_files:/app/media:ro
      - nginx_logs:/var/log/nginx
      - letsencrypt:/etc/letsencrypt:ro
      - ./public:/var/www/html:ro
    
    networks:
      - frontend-network
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    
    # Оптимизация Nginx для Timeweb Cloud
    sysctls:
      - net.core.somaxconn=65535
      - net.ipv4.ip_local_port_range=1024 65535
      - net.ipv4.tcp_tw_reuse=1
    
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Certbot для SSL сертификатов
  certbot:
    image: certbot/certbot:latest
    container_name: labosfera_certbot
    
    volumes:
      - letsencrypt:/etc/letsencrypt
      - ./public:/var/www/certbot
    
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    
    networks:
      - frontend-network
    
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # Redis для кэширования (опционально)
  redis:
    image: redis:7-alpine
    container_name: labosfera_redis
    restart: unless-stopped
    
    command: >
      redis-server
      --maxmemory 128mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --rdbcompression yes
      --rdbchecksum yes
    
    volumes:
      - ./redis/data:/data
    
    networks:
      - backend-network
    
    ports:
      - "127.0.0.1:6379:6379"
    
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
    
    profiles: ["cache"]  # Запускается только с --profile cache
    
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # Watchtower для автообновлений (опционально)
  watchtower:
    image: containrrr/watchtower:latest
    container_name: labosfera_watchtower
    restart: unless-stopped
    
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=86400
      - WATCHTOWER_INCLUDE_STOPPED=true
      - WATCHTOWER_REVIVE_STOPPED=false
    
    command: --interval 86400 --cleanup
    
    profiles: ["autoupdate"]  # Запускается только с --profile autoupdate
    
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

# ==========================================
# КОМАНДЫ ДЛЯ УПРАВЛЕНИЯ
# ==========================================

# Запуск основных сервисов:
# docker-compose -f docker-compose.timeweb.yml up -d

# Запуск с кэшированием:
# docker-compose -f docker-compose.timeweb.yml --profile cache up -d

# Запуск с автообновлениями:
# docker-compose -f docker-compose.timeweb.yml --profile autoupdate up -d

# Запуск всех сервисов:
# docker-compose -f docker-compose.timeweb.yml --profile cache --profile autoupdate up -d

# Просмотр логов:
# docker-compose -f docker-compose.timeweb.yml logs -f

# Перезапуск сервиса:
# docker-compose -f docker-compose.timeweb.yml restart backend

# Обновление:
# docker-compose -f docker-compose.timeweb.yml pull
# docker-compose -f docker-compose.timeweb.yml up -d

# Бэкап базы данных:
# docker-compose -f docker-compose.timeweb.yml exec db pg_dump -U labosfera labosfera > backup.sql

# Мониторинг ресурсов:
# docker stats $(docker-compose -f docker-compose.timeweb.yml ps -q)