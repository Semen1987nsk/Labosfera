#!/bin/bash
# –°–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –õ–ê–ë–û–°–§–ï–†–ê —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è Timeweb Cloud
# –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è Ubuntu 24.04 LTS —Å NVMe –¥–∏—Å–∫–∞–º–∏ –∏ –≥–∏–≥–∞–±–∏—Ç–Ω—ã–º –∫–∞–Ω–∞–ª–æ–º

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# –õ–æ–≥–æ—Ç–∏–ø
echo -e "${CYAN}"
cat << 'EOF'
 ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó 
 ‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó
    ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë ‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù
    ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó
    ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ïê‚ïù ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù
    ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù 
                                                            
    ‚ñà‚ñà‚ïó      ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó 
    ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó
    ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë
    ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë
    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù
EOF
echo -e "${NC}"

echo -e "${BLUE}üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –õ–ê–ë–û–°–§–ï–†–ê –Ω–∞ Timeweb Cloud${NC}"
echo -e "${BLUE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
echo ""

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
error() {
    echo -e "${RED}‚ùå –û—à–∏–±–∫–∞: $1${NC}"
    exit 1
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

step() {
    echo -e "${PURPLE}üîß $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ–¥ root
if [ "$EUID" -ne 0 ]; then
    error "–°–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –ø–æ–¥ root. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: sudo su - && ./deploy-timeweb.sh"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Ubuntu
if ! grep -q "Ubuntu" /etc/os-release; then
    warning "–°–∫—Ä–∏–ø—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è Ubuntu. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n)"
    read -r response
    if [[ ! "$response" =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ Ubuntu
UBUNTU_VERSION=$(lsb_release -rs)
info "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ Ubuntu $UBUNTU_VERSION"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞
CPU_CORES=$(nproc)
RAM_GB=$(free -g | awk '/^Mem:/ {print $2}')
DISK_GB=$(df -BG / | awk 'NR==2 {print $2}' | sed 's/G//')

echo ""
info "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞ Timeweb Cloud:"
echo "   CPU: $CPU_CORES —è–¥–µ—Ä"
echo "   RAM: ${RAM_GB}GB"
echo "   –î–∏—Å–∫: ${DISK_GB}GB"
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
if [ "$RAM_GB" -lt 1 ]; then
    error "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ RAM (–º–∏–Ω–∏–º—É–º 2GB —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)"
fi

if [ "$DISK_GB" -lt 10 ]; then
    error "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ (–º–∏–Ω–∏–º—É–º 15GB)"
fi

# 1. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
step "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Ubuntu –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏..."
export DEBIAN_FRONTEND=noninteractive
apt-get update -qq
apt-get upgrade -y -qq
apt-get autoremove -y -qq
success "–°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"

# 2. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
step "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤—ã—Ö –ø–∞–∫–µ—Ç–æ–≤..."
apt-get install -y -qq \
    curl \
    wget \
    git \
    nano \
    htop \
    ufw \
    unzip \
    software-properties-common \
    apt-transport-https \
    ca-certificates \
    gnupg \
    lsb-release \
    net-tools \
    tree \
    fail2ban
success "–ë–∞–∑–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"

# 3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã
step "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã..."
timedatectl set-timezone Europe/Moscow
success "–í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: Europe/Moscow"

# 4. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker (–ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è)
step "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Engine..."
if ! command -v docker &> /dev/null; then
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π GPG –∫–ª—é—á Docker
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π Docker
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker
    apt-get update -qq
    apt-get install -y -qq docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Docker
    systemctl enable docker
    systemctl start docker
    
    success "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω"
else
    success "Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Docker
DOCKER_VERSION=$(docker --version | cut -d' ' -f3 | cut -d',' -f1)
info "–í–µ—Ä—Å–∏—è Docker: $DOCKER_VERSION"

# 5. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose (v2)
step "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose v2..."
if ! docker compose version &> /dev/null; then
    # Docker Compose —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –ø–ª–∞–≥–∏–Ω
    if ! command -v docker-compose &> /dev/null; then
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º standalone –≤–µ—Ä—Å–∏—é –∫–∞–∫ fallback
        DOCKER_COMPOSE_VERSION=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep 'tag_name' | cut -d\" -f4)
        curl -L "https://github.com/docker/compose/releases/download/$DOCKER_COMPOSE_VERSION/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        chmod +x /usr/local/bin/docker-compose
    fi
    success "Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
else
    success "Docker Compose —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

# 6. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è Docker –¥–ª—è Timeweb Cloud
systemctl restart docker

step "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è Docker –¥–ª—è Timeweb Cloud..."
mkdir -p /etc/docker

cat > /etc/docker/daemon.json << 'EOF'
{
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "10m",
    "max-file": "3"
  }
}
EOF

systemctl restart docker
success "Docker –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è Timeweb Cloud"

# 7. –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
step "–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –õ–ê–ë–û–°–§–ï–†–ê..."
PROJECT_DIR="/opt/labosfera"

if [ -d "$PROJECT_DIR" ]; then
    warning "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $PROJECT_DIR —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –û–±–Ω–æ–≤–ª—è–µ–º..."
    cd "$PROJECT_DIR"
    git pull origin main
else
    cd /opt
    git clone https://github.com/Semen1987nsk/Labosfera.git labosfera
    cd "$PROJECT_DIR"
fi

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞
chown -R root:root "$PROJECT_DIR"
success "–ü—Ä–æ–µ–∫—Ç —Å–∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω –≤ $PROJECT_DIR"

# 8. –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ .env.prod –¥–ª—è Timeweb Cloud
step "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è Timeweb Cloud..."

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º IP —Å–µ—Ä–≤–µ—Ä–∞
SERVER_IP=$(curl -s ifconfig.me || curl -s ipinfo.io/ip || hostname -I | awk '{print $1}')

cat > "$PROJECT_DIR/.env.prod.timeweb" << EOF
# =================================================================
# –õ–ê–ë–û–°–§–ï–†–ê - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Timeweb Cloud
# =================================================================

# –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
DEBUG=False
DJANGO_SECRET_KEY=CHANGE_THIS_SECRET_KEY_NOW_50_CHARS_MINIMUM
ALLOWED_HOSTS=labosfera.ru,www.labosfera.ru,$SERVER_IP,localhost,127.0.0.1

# –î–æ–º–µ–Ω –∏ SSL
DOMAIN=labosfera.ru
EMAIL=admin@labosfera.ru

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL
POSTGRES_DB=labosfera
POSTGRES_USER=labosfera
POSTGRES_PASSWORD=CHANGE_THIS_DB_PASSWORD_NOW
DATABASE_URL=postgresql://labosfera:CHANGE_THIS_DB_PASSWORD_NOW@db:5432/labosfera

# CORS –∏ CSRF (–¥–ª—è production)
CORS_ALLOWED_ORIGINS=https://labosfera.ru,https://www.labosfera.ru
CSRF_TRUSTED_ORIGINS=https://labosfera.ru,https://www.labosfera.ru

# API URL –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
NEXT_PUBLIC_API_URL=https://labosfera.ru/api

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Timeweb Cloud (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ)
TIMEWEB_OPTIMIZED=true
USE_REDIS_CACHE=false
DATABASE_CONN_MAX_AGE=600
DATABASE_POOL_SIZE=20

# Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (SMTP)
EMAIL_BACKEND=django.core.mail.backends.smtp.EmailBackend
EMAIL_HOST=smtp.yandex.ru
EMAIL_PORT=587
EMAIL_USE_TLS=True
EMAIL_HOST_USER=
EMAIL_HOST_PASSWORD=

# Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
TELEGRAM_BOT_TOKEN=
TELEGRAM_CHAT_ID=

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤
MEDIA_URL=/media/
STATIC_URL=/static/

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
LOG_LEVEL=INFO
ENABLE_DEBUG_TOOLBAR=False

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
SECURE_SSL_REDIRECT=True
SECURE_HSTS_SECONDS=31536000
SECURE_HSTS_INCLUDE_SUBDOMAINS=True
SECURE_HSTS_PRELOAD=True
SECURE_CONTENT_TYPE_NOSNIFF=True
SECURE_BROWSER_XSS_FILTER=True
SESSION_COOKIE_SECURE=True
CSRF_COOKIE_SECURE=True

# –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
LANGUAGE_CODE=ru-ru
TIME_ZONE=Europe/Moscow
USE_I18N=True
USE_L10N=True
USE_TZ=True
EOF

success "–ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞"

# 9. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
echo ""
warning "üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û! üî•"
echo ""
echo "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:"
echo ""

# Django Secret Key
echo -e "${YELLOW}1. Django Secret Key${NC}"
echo "–¢–µ–∫—É—â–∏–π –∫–ª—é—á –Ω–µ–±–µ–∑–æ–ø–∞—Å–µ–Ω –∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω."
echo "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á? (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è) [Y/n]:"
read -r generate_key
if [[ ! "$generate_key" =~ ^[Nn]$ ]]; then
    NEW_SECRET_KEY=$(python3 -c "import secrets; import string; print(''.join(secrets.choice(string.ascii_letters + string.digits + '!@#$%^&*(-_=+)') for _ in range(50)))")
    sed -i "s/CHANGE_THIS_SECRET_KEY_NOW_50_CHARS_MINIMUM/$NEW_SECRET_KEY/" "$PROJECT_DIR/.env.prod.timeweb"
    success "Django Secret Key —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω"
else
    echo "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Django Secret Key (50+ —Å–∏–º–≤–æ–ª–æ–≤):"
    read -r user_secret_key
    if [ ${#user_secret_key} -lt 50 ]; then
        error "Secret Key –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤!"
    fi
    sed -i "s/CHANGE_THIS_SECRET_KEY_NOW_50_CHARS_MINIMUM/$user_secret_key/" "$PROJECT_DIR/.env.prod.timeweb"
fi

echo ""

# Database Password
echo -e "${YELLOW}2. –ü–∞—Ä–æ–ª—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö${NC}"
echo "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è PostgreSQL? (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è) [Y/n]:"
read -r generate_db_pass
if [[ ! "$generate_db_pass" =~ ^[Nn]$ ]]; then
    DB_PASSWORD=$(python3 -c "import secrets; import string; print(''.join(secrets.choice(string.ascii_letters + string.digits + '!@#$%^&*') for _ in range(20)))")
    sed -i "s/CHANGE_THIS_DB_PASSWORD_NOW/$DB_PASSWORD/g" "$PROJECT_DIR/.env.prod.timeweb"
    success "–ü–∞—Ä–æ–ª—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω"
else
    echo "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:"
    read -s db_password
    if [ ${#db_password} -lt 8 ]; then
        error "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤!"
    fi
    sed -i "s/CHANGE_THIS_DB_PASSWORD_NOW/$db_password/g" "$PROJECT_DIR/.env.prod.timeweb"
fi

echo ""

# Domain
echo -e "${YELLOW}3. –î–æ–º–µ–Ω${NC}"
echo "–¢–µ–∫—É—â–∏–π –¥–æ–º–µ–Ω: labosfera.ru"
echo "–ò–∑–º–µ–Ω–∏—Ç—å –¥–æ–º–µ–Ω? [y/N]:"
read -r change_domain
if [[ "$change_domain" =~ ^[Yy]$ ]]; then
    echo "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –¥–æ–º–µ–Ω (–±–µ–∑ https://):"
    read -r user_domain
    sed -i "s/labosfera.ru/$user_domain/g" "$PROJECT_DIR/.env.prod.timeweb"
    success "–î–æ–º–µ–Ω –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ $user_domain"
fi

echo ""

# Email
echo -e "${YELLOW}4. Email –¥–ª—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞${NC}"
echo "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è Let's Encrypt:"
read -r user_email
if [[ "$user_email" =~ ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]]; then
    sed -i "s/admin@labosfera.ru/$user_email/" "$PROJECT_DIR/.env.prod.timeweb"
    success "Email —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $user_email"
else
    error "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å!"
fi

# –ö–æ–ø–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
cp "$PROJECT_DIR/.env.prod.timeweb" "$PROJECT_DIR/.env.prod"
success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ .env.prod"

# 10. –°–æ–∑–¥–∞–Ω–∏–µ docker-compose.timeweb.yml
step "–°–æ–∑–¥–∞–Ω–∏–µ Docker Compose –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è Timeweb Cloud..."

cat > "$PROJECT_DIR/docker-compose.timeweb.yml" << 'EOF'
version: '3.8'

services:
  # PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=ru_RU.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - labosfera_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Django Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.timeweb
    restart: unless-stopped
    environment:
      - DEBUG=False
      - DJANGO_SETTINGS_MODULE=labosfera_project.settings_timeweb
    env_file:
      - .env.prod
    volumes:
      - media_files:/app/media
      - static_files:/app/staticfiles
      - ./backend/logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
    networks:
      - labosfera_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 768M
        reservations:
          memory: 512M

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.timeweb
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
    restart: unless-stopped
    env_file:
      - .env.prod
    depends_on:
      - backend
    networks:
      - labosfera_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Nginx (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è Timeweb Cloud)
  nginx:
    image: nginx:1.25-alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/timeweb.conf:/etc/nginx/nginx.conf:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
      - static_files:/var/www/static:ro
      - media_files:/var/www/media:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - labosfera_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/nginx-health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Certbot –¥–ª—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
  certbot:
    image: certbot/certbot:latest
    restart: "no"
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - labosfera_network

networks:
  labosfera_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  media_files:
    driver: local
  static_files:
    driver: local
EOF

success "Docker Compose –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞"

# 11. –°–æ–∑–¥–∞–Ω–∏–µ Dockerfile –¥–ª—è backend (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è Timeweb)
step "–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ Dockerfile –¥–ª—è backend..."

cat > "$PROJECT_DIR/backend/Dockerfile.timeweb" << 'EOF'
# Multi-stage build –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–∞
FROM python:3.11-slim as builder

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —Å–±–æ—Ä–∫–∏
RUN apt-get update && apt-get install -y \
    build-essential \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# –ö–æ–ø–∏—Ä—É–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
COPY requirements.txt .
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -r requirements.txt

# Production stage
FROM python:3.11-slim

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ runtime –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
RUN apt-get update && apt-get install -y \
    libpq5 \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# –ö–æ–ø–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏–∑ builder stage
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
RUN groupadd -r django && useradd -r -g django django

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
WORKDIR /app

# –ö–æ–ø–∏—Ä—É–µ–º –∫–æ–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
COPY . .

# –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
RUN mkdir -p /app/media /app/staticfiles /app/logs && \
    chown -R django:django /app

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞
USER django

# –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
RUN python manage.py collectstatic --noinput --settings=labosfera_project.settings_timeweb

# Healthcheck
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/api/health/ || exit 1

# Expose –ø–æ—Ä—Ç
EXPOSE 8000

# –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞
CMD ["gunicorn", "--bind", "0.0.0.0:8000", "--workers", "3", "--worker-class", "sync", "--worker-connections", "1000", "--max-requests", "1000", "--max-requests-jitter", "50", "--timeout", "30", "--keep-alive", "2", "--preload", "labosfera_project.wsgi:application"]
EOF

success "Dockerfile –¥–ª—è backend —Å–æ–∑–¥–∞–Ω"

# 12. –°–æ–∑–¥–∞–Ω–∏–µ Dockerfile –¥–ª—è frontend (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è Timeweb)
step "–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ Dockerfile –¥–ª—è frontend..."

cat > "$PROJECT_DIR/frontend/Dockerfile.timeweb" << 'EOF'
# Multi-stage build –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
FROM node:18-alpine AS base

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ package.json
FROM base AS deps
WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production && npm cache clean --force

# Build stage
FROM base AS builder
WORKDIR /app
COPY package*.json ./
RUN npm ci
COPY . .

# –ü–µ—Ä–µ–¥–∞–µ–º build-time –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
ARG NEXT_PUBLIC_API_URL
ENV NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL

# –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–±–æ—Ä–∫—É
ENV NODE_ENV=production
RUN npm run build

# Production stage
FROM base AS runner
WORKDIR /app

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# –ö–æ–ø–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã
COPY --from=builder /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
USER nextjs

# Healthcheck
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3000/api/health || exit 1

EXPOSE 3000

ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

CMD ["node", "server.js"]
EOF

success "Dockerfile –¥–ª—è frontend —Å–æ–∑–¥–∞–Ω"

# 13. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Django –¥–ª—è Timeweb Cloud
step "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Django –¥–ª—è Timeweb Cloud..."

cat > "$PROJECT_DIR/backend/labosfera_project/settings_timeweb.py" << 'EOF'
"""
Django –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Timeweb Cloud production.
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è NVMe –¥–∏—Å–∫–æ–≤ –∏ –≥–∏–≥–∞–±–∏—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.
"""

from .settings import *
import os
from pathlib import Path

# Build paths inside the project
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

# –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ö–æ—Å—Ç—ã –¥–ª—è Timeweb Cloud
ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', 'localhost').split(',')

# Database –¥–ª—è Timeweb Cloud (PostgreSQL)
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('POSTGRES_DB', 'labosfera'),
        'USER': os.environ.get('POSTGRES_USER', 'labosfera'),
        'PASSWORD': os.environ.get('POSTGRES_PASSWORD'),
        'HOST': 'db',
        'PORT': '5432',
        'CONN_MAX_AGE': int(os.environ.get('DATABASE_CONN_MAX_AGE', 600)),
        'OPTIONS': {
            'MAX_CONNS': int(os.environ.get('DATABASE_POOL_SIZE', 20)),
            'connect_timeout': 10,
        }
    }
}

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è Timeweb Cloud)
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'timeweb-labosfera-cache',
        'OPTIONS': {
            'MAX_ENTRIES': 10000,
            'CULL_FREQUENCY': 3,
        }
    }
}

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è NVMe)
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# –ú–µ–¥–∏–∞ —Ñ–∞–π–ª—ã
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–ª—è Timeweb Cloud
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
SECURE_SSL_REDIRECT = True
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
SECURE_HSTS_SECONDS = 31536000
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_BROWSER_XSS_FILTER = True

# CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
CORS_ALLOWED_ORIGINS = os.environ.get('CORS_ALLOWED_ORIGINS', '').split(',')
CORS_ALLOW_CREDENTIALS = True
CSRF_TRUSTED_ORIGINS = os.environ.get('CSRF_TRUSTED_ORIGINS', '').split(',')

# Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.yandex.ru')
EMAIL_PORT = int(os.environ.get('EMAIL_PORT', 587))
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')
DEFAULT_FROM_EMAIL = os.environ.get('EMAIL_HOST_USER', 'noreply@labosfera.ru')

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Timeweb Cloud
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'django.log'),
            'maxBytes': 1024*1024*50,  # 50 MB
            'backupCount': 5,
            'formatter': 'verbose',
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        'labosfera': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}

# –°–µ—Å—Å–∏–∏ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'
SESSION_CACHE_ALIAS = 'default'
SESSION_COOKIE_AGE = 86400  # 24 —á–∞—Å–∞

# –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è Timeweb Cloud
DATA_UPLOAD_MAX_MEMORY_SIZE = 1024 * 1024 * 10  # 10MB
FILE_UPLOAD_MAX_MEMORY_SIZE = 1024 * 1024 * 5   # 5MB

# –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ë–î
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# –ò–Ω—Ç–µ—Ä–Ω–∞—Ü–∏–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è
LANGUAGE_CODE = 'ru-ru'
TIME_ZONE = 'Europe/Moscow'
USE_I18N = True
USE_L10N = True
USE_TZ = True

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è health check
HEALTH_CHECK_URL = '/api/health/'
EOF

success "Django –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Timeweb Cloud —Å–æ–∑–¥–∞–Ω—ã"

# 14. –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx
step "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx –¥–ª—è Timeweb Cloud..."

mkdir -p "$PROJECT_DIR/nginx/logs"

cat > "$PROJECT_DIR/nginx/timeweb.conf" << 'EOF'
# Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Timeweb Cloud
# –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –≥–∏–≥–∞–±–∏—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏ NVMe –¥–∏—Å–∫–æ–≤

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è Timeweb Cloud
worker_rlimit_nofile 65535;

events {
    worker_connections 8192;
    use epoll;
    multi_accept on;
}

http {
    # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';
    
    access_log /var/log/nginx/access.log main;

    # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è Timeweb Cloud)
    sendfile on;
    sendfile_max_chunk 1m;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 1000;
    types_hash_max_size 2048;
    server_tokens off;
    
    # –ë—É—Ñ–µ—Ä—ã (—É–≤–µ–ª–∏—á–µ–Ω—ã –¥–ª—è –≥–∏–≥–∞–±–∏—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞)
    client_body_buffer_size 1M;
    client_header_buffer_size 4k;
    client_max_body_size 100M;
    large_client_header_buffers 4 8k;
    
    # –ü—Ä–æ–∫—Å–∏ –±—É—Ñ–µ—Ä—ã
    proxy_buffering on;
    proxy_buffer_size 8k;
    proxy_buffers 32 8k;
    proxy_busy_buffers_size 16k;
    proxy_temp_file_write_size 16k;
    
    # –¢–∞–π–º–∞—É—Ç—ã
    client_body_timeout 30s;
    client_header_timeout 30s;
    proxy_connect_timeout 30s;
    proxy_send_timeout 30s;
    proxy_read_timeout 30s;
    send_timeout 30s;

    # –°–∂–∞—Ç–∏–µ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏)
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    gzip_disable "msie6";

    # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ (–∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –¥–ª—è Timeweb Cloud)
    open_file_cache max=10000 inactive=60s;
    open_file_cache_valid 120s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;

    # SSL –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

    # Upstream —Å–µ—Ä–≤–µ—Ä—ã
    upstream backend {
        server backend:8000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    
    upstream frontend {
        server frontend:3000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # HTTP —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ HTTPS
    server {
        listen 80;
        server_name _;
        
        # Let's Encrypt challenge
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
            try_files $uri =404;
        }
        
        # Health check –¥–ª—è nginx
        location /nginx-health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º –Ω–∞ HTTPS
        location / {
            return 301 https://$host$request_uri;
        }
    }

    # HTTPS —Å–µ—Ä–≤–µ—Ä
    server {
        listen 443 ssl http2;
        server_name labosfera.ru www.labosfera.ru;
        
        # SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
        ssl_certificate /etc/letsencrypt/live/labosfera.ru/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/labosfera.ru/privkey.pem;
        
        # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (–∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ)
        location /static/ {
            alias /var/www/static/;
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header X-Cache-Status "STATIC";
            
            # Gzip –¥–ª—è —Å—Ç–∞—Ç–∏–∫–∏
            gzip_static on;
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
            location ~* \.(php|py|pl|jsp|asp|sh|cgi)$ {
                deny all;
            }
        }
        
        # –ú–µ–¥–∏–∞ —Ñ–∞–π–ª—ã
        location /media/ {
            alias /var/www/media/;
            expires 30d;
            add_header Cache-Control "public";
            add_header X-Cache-Status "MEDIA";
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–ª—è –º–µ–¥–∏–∞
            location ~* \.(php|py|pl|jsp|asp|sh|cgi)$ {
                deny all;
            }
        }
        
        # API (—Å rate limiting)
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # –¢–∞–π–º–∞—É—Ç—ã –¥–ª—è API
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è GET –∑–∞–ø—Ä–æ—Å–æ–≤
            proxy_cache_methods GET HEAD;
            proxy_cache_valid 200 302 5m;
            proxy_cache_valid 404 1m;
        }
        
        # Django –∞–¥–º–∏–Ω–∫–∞ (—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞—â–∏—Ç–æ–π)
        location /admin/ {
            limit_req zone=login burst=5 nodelay;
            
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
            add_header X-Frame-Options "DENY" always;
        }
        
        # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
        location / {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # –¢–∞–π–º–∞—É—Ç—ã
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # WebSocket –ø–æ–¥–¥–µ—Ä–∂–∫–∞
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
        
        # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        location ~ ~$ {
            deny all;
            access_log off;
            log_not_found off;
        }
    }
}
EOF

success "Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞"

# 15. –°–æ–∑–¥–∞–Ω–∏–µ health check endpoints
step "–°–æ–∑–¥–∞–Ω–∏–µ health check endpoints..."

# Backend health check
mkdir -p "$PROJECT_DIR/backend/health"
cat > "$PROJECT_DIR/backend/health/views.py" << 'EOF'
from django.http import JsonResponse
from django.db import connection
from django.core.cache import cache
import time

def health_check(request):
    """Health check endpoint –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    start_time = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        cursor = connection.cursor()
        cursor.execute("SELECT 1")
        db_status = "ok"
    except Exception as e:
        db_status = f"error: {str(e)}"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
    try:
        cache.set('health_check', 'ok', 10)
        cache_value = cache.get('health_check')
        cache_status = "ok" if cache_value == 'ok' else "error"
    except Exception as e:
        cache_status = f"error: {str(e)}"
    
    response_time = (time.time() - start_time) * 1000
    
    return JsonResponse({
        'status': 'healthy',
        'timestamp': int(time.time()),
        'response_time_ms': round(response_time, 2),
        'database': db_status,
        'cache': cache_status,
        'version': '1.0.0'
    })
EOF

# Frontend health check
cat > "$PROJECT_DIR/frontend/pages/api/health.js" << 'EOF'
export default function handler(req, res) {
  const startTime = Date.now();
  
  const healthData = {
    status: 'healthy',
    timestamp: Math.floor(Date.now() / 1000),
    response_time_ms: Date.now() - startTime,
    version: '1.0.0',
    node_version: process.version
  };
  
  res.status(200).json(healthData);
}
EOF

success "Health check endpoints —Å–æ–∑–¥–∞–Ω—ã"

# 16. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ firewall
step "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ firewall –¥–ª—è Timeweb Cloud..."

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º UFW
ufw --force reset
ufw default deny incoming
ufw default allow outgoing

# –†–∞–∑—Ä–µ—à–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ—Ä—Ç—ã
ufw allow 22/tcp    # SSH
ufw allow 80/tcp    # HTTP
ufw allow 443/tcp   # HTTPS

# –í–∫–ª—é—á–∞–µ–º firewall
ufw --force enable
success "Firewall –Ω–∞—Å—Ç—Ä–æ–µ–Ω"

# 17. –ü–æ–ª—É—á–µ–Ω–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
step "–ü–æ–ª—É—á–µ–Ω–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ Let's Encrypt..."

# –ß–∏—Ç–∞–µ–º –¥–æ–º–µ–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
DOMAIN=$(grep "DOMAIN=" "$PROJECT_DIR/.env.prod" | cut -d'=' -f2)
EMAIL=$(grep "EMAIL=" "$PROJECT_DIR/.env.prod" | cut -d'=' -f2)

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
mkdir -p "$PROJECT_DIR/certbot/conf" "$PROJECT_DIR/certbot/www"

# –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º nginx –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
docker run -d --name temp_nginx \
    -p 80:80 \
    -v "$PROJECT_DIR/certbot/www:/var/www/certbot" \
    nginx:alpine

# –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
docker run --rm \
    -v "$PROJECT_DIR/certbot/conf:/etc/letsencrypt" \
    -v "$PROJECT_DIR/certbot/www:/var/www/certbot" \
    certbot/certbot \
    certonly --webroot \
    --webroot-path=/var/www/certbot \
    --email "$EMAIL" \
    --agree-tos \
    --no-eff-email \
    -d "$DOMAIN" -d "www.$DOMAIN"

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π nginx
docker stop temp_nginx && docker rm temp_nginx

success "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ–ª—É—á–µ–Ω"

# 18. –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
step "–°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."

cd "$PROJECT_DIR"

# –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤
info "–°–±–æ—Ä–∫–∞ backend –æ–±—Ä–∞–∑–∞..."
docker build -f backend/Dockerfile.timeweb -t labosfera-backend:timeweb backend/

info "–°–±–æ—Ä–∫–∞ frontend –æ–±—Ä–∞–∑–∞..."
docker build -f frontend/Dockerfile.timeweb -t labosfera-frontend:timeweb frontend/

# –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
info "–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker compose -f docker-compose.timeweb.yml up -d

success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã"

# 19. –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
step "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."

info "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
sleep 30

info "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π..."
docker compose -f docker-compose.timeweb.yml exec -T backend python manage.py migrate --settings=labosfera_project.settings_timeweb

info "–°–æ–∑–¥–∞–Ω–∏–µ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è..."
docker compose -f docker-compose.timeweb.yml exec -T backend python manage.py shell --settings=labosfera_project.settings_timeweb << 'EOF'
from django.contrib.auth import get_user_model
User = get_user_model()
if not User.objects.filter(username='admin').exists():
    User.objects.create_superuser('admin', 'admin@labosfera.ru', 'admin123')
    print("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω: admin/admin123")
else:
    print("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
EOF

info "–°–±–æ—Ä —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤..."
docker compose -f docker-compose.timeweb.yml exec -T backend python manage.py collectstatic --noinput --settings=labosfera_project.settings_timeweb

success "–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –≥–æ—Ç–æ–≤—ã"

# 20. –§–∏–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
step "–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
echo ""
info "–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
docker compose -f docker-compose.timeweb.yml ps

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
echo ""
info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º backend
if curl -f -s http://localhost:8000/api/health/ > /dev/null; then
    success "Backend –¥–æ—Å—Ç—É–ø–µ–Ω"
else
    warning "Backend –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º frontend
if curl -f -s http://localhost:3000/api/health > /dev/null; then
    success "Frontend –¥–æ—Å—Ç—É–ø–µ–Ω"
else
    warning "Frontend –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º nginx
if curl -f -s http://localhost/nginx-health > /dev/null; then
    success "Nginx –¥–æ—Å—Ç—É–ø–µ–Ω"
else
    warning "Nginx –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
fi

# 21. –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
step "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á..."

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
(crontab -l 2>/dev/null; echo "0 12 * * * cd $PROJECT_DIR && docker compose -f docker-compose.timeweb.yml run --rm certbot renew && docker compose -f docker-compose.timeweb.yml restart nginx") | crontab -

# –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤
(crontab -l 2>/dev/null; echo "0 1 * * 0 find $PROJECT_DIR -name '*.log' -mtime +7 -delete") | crontab -

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ (–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ)
(crontab -l 2>/dev/null; echo "0 3 * * 0 cd $PROJECT_DIR && docker compose -f docker-compose.timeweb.yml restart") | crontab -

success "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"

# 22. –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
step "–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è..."

# –°–∫—Ä–∏–ø—Ç —Å—Ç–∞—Ç—É—Å–∞
cat > "$PROJECT_DIR/status-timeweb.sh" << 'EOF'
#!/bin/bash
echo "=== –õ–ê–ë–û–°–§–ï–†–ê –Ω–∞ Timeweb Cloud - –°—Ç–∞—Ç—É—Å ==="
echo ""
echo "üìä –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:"
docker compose -f docker-compose.timeweb.yml ps
echo ""
echo "üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤:"
docker stats --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.MemPerc}}"
echo ""
echo "üíø –î–∏—Å–∫:"
df -h /
echo ""
echo "üåê –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å:"
curl -s http://localhost/nginx-health && echo " - Nginx: ‚úÖ"
curl -s http://localhost:8000/api/health/ > /dev/null && echo " - Backend: ‚úÖ" || echo " - Backend: ‚ùå"
curl -s http://localhost:3000/api/health > /dev/null && echo " - Frontend: ‚úÖ" || echo " - Frontend: ‚ùå"
EOF

chmod +x "$PROJECT_DIR/status-timeweb.sh"

# –°–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
cat > "$PROJECT_DIR/restart-timeweb.sh" << 'EOF'
#!/bin/bash
echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –õ–ê–ë–û–°–§–ï–†–ê –Ω–∞ Timeweb Cloud..."
cd /opt/labosfera
docker compose -f docker-compose.timeweb.yml restart
echo "‚úÖ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω"
EOF

chmod +x "$PROJECT_DIR/restart-timeweb.sh"

# –°–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
cat > "$PROJECT_DIR/update-timeweb.sh" << 'EOF'
#!/bin/bash
echo "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –õ–ê–ë–û–°–§–ï–†–ê –Ω–∞ Timeweb Cloud..."
cd /opt/labosfera

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
docker compose -f docker-compose.timeweb.yml down

# –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥
git pull origin main

# –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–∑—ã
docker build -f backend/Dockerfile.timeweb -t labosfera-backend:timeweb backend/
docker build -f frontend/Dockerfile.timeweb -t labosfera-frontend:timeweb frontend/

# –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
docker compose -f docker-compose.timeweb.yml up -d

# –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
sleep 30
docker compose -f docker-compose.timeweb.yml exec backend python manage.py migrate --settings=labosfera_project.settings_timeweb

# –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏–∫—É
docker compose -f docker-compose.timeweb.yml exec backend python manage.py collectstatic --noinput --settings=labosfera_project.settings_timeweb

echo "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
EOF

chmod +x "$PROJECT_DIR/update-timeweb.sh"

success "–°–∫—Ä–∏–ø—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã"

# –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
echo ""
echo -e "${GREEN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
echo -e "${GREEN}üéâ –õ–ê–ë–û–°–§–ï–†–ê —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞ –Ω–∞ Timeweb Cloud!${NC}"
echo -e "${GREEN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
echo ""

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏
echo -e "${BLUE}üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏:${NC}"
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
echo "üåê –î–æ–º–µ–Ω: https://$DOMAIN"
echo "üñ•Ô∏è  IP —Å–µ—Ä–≤–µ—Ä–∞: $SERVER_IP"
echo "üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $PROJECT_DIR"
echo "üê≥ Docker Compose: docker-compose.timeweb.yml"
echo "‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Django: settings_timeweb.py"
echo ""

# –î–æ—Å—Ç—É–ø—ã
echo -e "${BLUE}üîë –î–æ—Å—Ç—É–ø—ã:${NC}"
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
echo "üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å: https://$DOMAIN/admin/"
echo "   –õ–æ–≥–∏–Ω: admin"
echo "   –ü–∞—Ä–æ–ª—å: admin123"
echo ""
echo "‚ö†Ô∏è  –í–ê–ñ–ù–û: –°—Ä–∞–∑—É —Å–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!"
echo ""

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
echo -e "${BLUE}üõ†Ô∏è  –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:${NC}"
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
echo "–°—Ç–∞—Ç—É—Å:      $PROJECT_DIR/status-timeweb.sh"
echo "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫:  $PROJECT_DIR/restart-timeweb.sh"
echo "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ:  $PROJECT_DIR/update-timeweb.sh"
echo ""

# –õ–æ–≥–∏
echo -e "${BLUE}üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤:${NC}"
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
echo "–í—Å–µ:         docker compose -f docker-compose.timeweb.yml logs -f"
echo "Backend:     docker compose -f docker-compose.timeweb.yml logs -f backend"
echo "Frontend:    docker compose -f docker-compose.timeweb.yml logs -f frontend"
echo "Nginx:       docker compose -f docker-compose.timeweb.yml logs -f nginx"
echo ""

# –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
echo -e "${BLUE}‚ö° –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:${NC}"
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
echo "üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü:    0.3-0.6 —Å–µ–∫"
echo "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:       100+ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"
echo "üìà –ó–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫:        200-300"
echo "üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM:   ~1GB"
echo ""

# –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
echo -e "${YELLOW}üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:${NC}"
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
echo "1. ‚úÖ –°–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
echo "2. ‚úÖ –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä –≤ –∫–∞—Ç–∞–ª–æ–≥"
echo "3. ‚úÖ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞"
echo "4. ‚úÖ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Google Analytics"
echo "5. ‚úÖ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
echo "6. ‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö"
echo ""

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
echo -e "${CYAN}üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Timeweb Cloud:${NC}"
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
echo "–ü–∞–Ω–µ–ª—å: https://timeweb.cloud/"
echo "–ü–æ–¥–¥–µ—Ä–∂–∫–∞: 8 (800) 700-06-08"
echo ""

echo -e "${GREEN}üöÄ –í–∞—à –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!${NC}"
echo ""