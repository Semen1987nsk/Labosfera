# ==========================================
# ЛАБОСФЕРА - Упрощенный Docker Compose для Timeweb Cloud
# БЕЗ Let's Encrypt (для использования с внешним SSL)
# ==========================================

version: '3.8'

networks:
  frontend-network:
    driver: bridge
  backend-network:
    driver: bridge

volumes:
  postgres_data:
  static_files:
  media_files:

services:
  # PostgreSQL База данных
  db:
    image: postgres:15-alpine
    container_name: labosfera_db
    restart: unless-stopped
    
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-labosfera}
      POSTGRES_USER: ${POSTGRES_USER:-labosfera}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=ru_RU.UTF-8"
    
    volumes:
      - postgres_data:/var/lib/postgresql/data
    
    networks:
      - backend-network
    
    ports:
      - "127.0.0.1:5432:5432"
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-labosfera} -d ${POSTGRES_DB:-labosfera}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Django Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.timeweb
    container_name: labosfera_backend
    restart: unless-stopped
    
    depends_on:
      db:
        condition: service_healthy
    
    environment:
      - DEBUG=False
      - DJANGO_SETTINGS_MODULE=labosfera_project.settings_timeweb
      - DATABASE_URL=postgresql://${POSTGRES_USER:-labosfera}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-labosfera}
      - POSTGRES_DB=${POSTGRES_DB:-labosfera}
      - POSTGRES_USER=${POSTGRES_USER:-labosfera}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-labosfera.ru,www.labosfera.ru}
      - CSRF_TRUSTED_ORIGINS=${CSRF_TRUSTED_ORIGINS:-http://labosfera.ru}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-http://labosfera.ru}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
    
    volumes:
      - static_files:/app/staticfiles
      - media_files:/app/media
    
    networks:
      - backend-network
      - frontend-network
    
    ports:
      - "127.0.0.1:8000:8000"
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.timeweb
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://labosfera.ru/api}
        NEXT_PUBLIC_SITE_URL: ${NEXT_PUBLIC_SITE_URL:-http://labosfera.ru}
    container_name: labosfera_frontend
    restart: unless-stopped
    
    depends_on:
      backend:
        condition: service_healthy
    
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://labosfera.ru/api}
      - NEXT_PUBLIC_SITE_URL=${NEXT_PUBLIC_SITE_URL:-http://labosfera.ru}
    
    networks:
      - frontend-network
    
    ports:
      - "127.0.0.1:3000:3000"

  # Nginx (простой HTTP)
  nginx:
    image: nginx:alpine
    container_name: labosfera_nginx
    restart: unless-stopped
    
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_started
    
    ports:
      - "80:80"
    
    volumes:
      - ./nginx-simple.conf:/etc/nginx/conf.d/default.conf:ro
      - static_files:/app/staticfiles:ro
      - media_files:/app/media:ro
    
    networks:
      - frontend-network
      - backend-network
