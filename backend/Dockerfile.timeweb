# ==========================================
# –õ–ê–ë–û–°–§–ï–†–ê - Dockerfile –¥–ª—è Django Backend
# –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è Timeweb Cloud Ubuntu 24.04 LTS
# ==========================================

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π Python –æ–±—Ä–∞–∑ —Å Alpine (–º–µ–Ω—å—à–µ —Ä–∞–∑–º–µ—Ä)
FROM python:3.12-slim-bullseye as base

# –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
LABEL maintainer="–õ–ê–ë–û–°–§–ï–†–ê <admin@labosfera.ru>"
LABEL description="Django Backend –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"
LABEL version="1.0"
LABEL optimized-for="Timeweb Cloud Ubuntu 24.04 LTS"

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ Python
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    DEBIAN_FRONTEND=noninteractive

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
RUN apt-get update && apt-get install -y --no-install-recommends \
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    gcc \
    g++ \
    libc6-dev \
    libpq-dev \
    libffi-dev \
    libssl-dev \
    # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    libjpeg-dev \
    libpng-dev \
    libwebp-dev \
    zlib1g-dev \
    # –£—Ç–∏–ª–∏—Ç—ã
    curl \
    wget \
    git \
    # –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
    locales \
    # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf /tmp/* \
    && rm -rf /var/tmp/*

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
RUN sed -i '/ru_RU.UTF-8/s/^# //g' /etc/locale.gen && locale-gen
ENV LANG=ru_RU.UTF-8 \
    LANGUAGE=ru_RU:ru \
    LC_ALL=ru_RU.UTF-8

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)
RUN groupadd -r django && useradd -r -g django django

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
RUN mkdir -p /app/logs /app/staticfiles /app/media \
    && chown -R django:django /app

# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
WORKDIR /app

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ requirements –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
COPY requirements.txt requirements_hosting.txt ./
RUN pip install --upgrade pip setuptools wheel \
    && pip install -r requirements_hosting.txt

# ==========================================
# –°–¢–ê–î–ò–Ø –†–ê–ó–†–ê–ë–û–¢–ö–ò
# ==========================================
FROM base as development

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
RUN pip install \
    django-debug-toolbar \
    django-extensions \
    ipython \
    && pip cache purge

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
COPY --chown=django:django . .

# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è django
USER django

# –ö–æ–º–∞–Ω–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"]

# ==========================================
# –°–¢–ê–î–ò–Ø –ü–†–û–î–ê–ö–®–ï–ù–ê
# ==========================================
FROM base as production

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Gunicorn —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏ –¥–ª—è Timeweb Cloud
RUN pip install \
    gunicorn[gevent]==21.2.0 \
    gevent==23.9.1 \
    psycopg2-binary==2.9.9 \
    whitenoise==6.6.0 \
    && pip cache purge

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
COPY --chown=django:django . .

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ entrypoint
RUN cat > /app/entrypoint.sh << 'EOF' && chmod +x /app/entrypoint.sh
#!/bin/bash
set -e

echo "üöÄ –õ–ê–ë–û–°–§–ï–†–ê - –ó–∞–ø—É—Å–∫ Django Backend –Ω–∞ Timeweb Cloud"
echo "=================================================="

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1"
}

# –û–∂–∏–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
log "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL..."
while ! pg_isready -h db -p 5432 -U ${POSTGRES_USER:-labosfera} -d ${POSTGRES_DB:-labosfera} > /dev/null 2>&1; do
    sleep 1
done
log "‚úÖ PostgreSQL –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
log "üìä –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
python manage.py migrate --no-input
log "‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã"

# –°–±–æ—Ä —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
log "üìÅ –°–±–æ—Ä —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤..."
python manage.py collectstatic --no-input --clear
log "‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã —Å–æ–±—Ä–∞–Ω—ã"

# –°–æ–∑–¥–∞–Ω–∏–µ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
if [ "$DJANGO_SUPERUSER_USERNAME" ] && [ "$DJANGO_SUPERUSER_EMAIL" ] && [ "$DJANGO_SUPERUSER_PASSWORD" ]; then
    log "üë§ –°–æ–∑–¥–∞–Ω–∏–µ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è..."
    python manage.py shell << PYTHON_SCRIPT
from django.contrib.auth import get_user_model
User = get_user_model()
if not User.objects.filter(username='$DJANGO_SUPERUSER_USERNAME').exists():
    User.objects.create_superuser('$DJANGO_SUPERUSER_USERNAME', '$DJANGO_SUPERUSER_EMAIL', '$DJANGO_SUPERUSER_PASSWORD')
    print("–°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω")
else:
    print("–°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
PYTHON_SCRIPT
    log "‚úÖ –°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ—Ç–æ–≤"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Django
log "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Django..."
python manage.py check --deploy
log "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞"

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
log "üåê –ó–∞–ø—É—Å–∫ Gunicorn —Å–µ—Ä–≤–µ—Ä–∞..."
log "üéØ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è Timeweb Cloud (NVMe + 1 Gbps)"
log "=================================================="

exec "$@"
EOF

# Health check —Å–∫—Ä–∏–ø—Ç
RUN cat > /app/healthcheck.py << 'EOF'
#!/usr/bin/env python
import sys
import requests
import os

def health_check():
    try:
        response = requests.get('http://localhost:8000/api/health/', timeout=5)
        if response.status_code == 200:
            print("‚úÖ Backend healthy")
            sys.exit(0)
        else:
            print(f"‚ùå Backend unhealthy: {response.status_code}")
            sys.exit(1)
    except Exception as e:
        print(f"‚ùå Health check failed: {e}")
        sys.exit(1)

if __name__ == "__main__":
    health_check()
EOF

RUN chmod +x /app/healthcheck.py

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
RUN chown -R django:django /app

# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è django
USER django

# –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ—Ä—Ç–∞
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD python /app/healthcheck.py

# Entrypoint –∏ –∫–æ–º–∞–Ω–¥–∞
ENTRYPOINT ["/app/entrypoint.sh"]

# –ö–æ–º–∞–Ω–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –¥–ª—è Timeweb Cloud
CMD ["gunicorn", \
     "labosfera_project.wsgi:application", \
     "--bind", "0.0.0.0:8000", \
     "--workers", "4", \
     "--worker-class", "gevent", \
     "--worker-connections", "1000", \
     "--max-requests", "1000", \
     "--max-requests-jitter", "100", \
     "--timeout", "30", \
     "--keep-alive", "2", \
     "--log-level", "info", \
     "--access-logfile", "-", \
     "--error-logfile", "-", \
     "--capture-output", \
     "--enable-stdio-inheritance"]

# ==========================================
# –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –î–õ–Ø TIMEWEB CLOUD
# ==========================================

# ‚úÖ –ú–Ω–æ–≥–æ—Å—Ç—É–ø–µ–Ω—á–∞—Ç–∞—è —Å–±–æ—Ä–∫–∞ –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–∞
# ‚úÖ Python 3.12 –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
# ‚úÖ Gevent workers –¥–ª—è –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
# ‚úÖ –†—É—Å—Å–∫–∞—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
# ‚úÖ Health checks –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
# ‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Gunicorn –¥–ª—è NVMe –¥–∏—Å–∫–æ–≤
# ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –∏ —Å–±–æ—Ä —Å—Ç–∞—Ç–∏–∫–∏
# ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (non-root –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
# ‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
# ‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ pip –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

# –°–ë–û–†–ö–ê:
# docker build -f Dockerfile.timeweb -t labosfera-backend:timeweb .

# –†–ê–ó–†–ê–ë–û–¢–ö–ê:
# docker build -f Dockerfile.timeweb --target development -t labosfera-backend:dev .

# –ü–†–û–î–ê–ö–®–ï–ù:
# docker build -f Dockerfile.timeweb --target production -t labosfera-backend:prod .