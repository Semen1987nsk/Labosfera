# ==========================================
# ЛАБОСФЕРА - Dockerfile для Django Backend
# Оптимизирован для Timeweb Cloud Ubuntu 24.04 LTS
# ==========================================

# Используем официальный Python образ с Alpine (меньше размер)
FROM python:3.12-slim-bullseye as base

# Метаданные
LABEL maintainer="ЛАБОСФЕРА <admin@labosfera.ru>"
LABEL description="Django Backend для интернет-магазина лабораторного оборудования"
LABEL version="1.0"
LABEL optimized-for="Timeweb Cloud Ubuntu 24.04 LTS"

# Переменные окружения для оптимизации Python
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    DEBIAN_FRONTEND=noninteractive

# Установка системных зависимостей
RUN apt-get update && apt-get install -y --no-install-recommends \
    # Основные зависимости
    gcc \
    g++ \
    libc6-dev \
    libpq-dev \
    libffi-dev \
    libssl-dev \
    # Для работы с изображениями
    libjpeg-dev \
    libpng-dev \
    libwebp-dev \
    zlib1g-dev \
    # Утилиты
    curl \
    wget \
    git \
    # Локализация
    locales \
    # Очистка кэша
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf /tmp/* \
    && rm -rf /var/tmp/*

# Настройка локализации для русского языка
RUN sed -i '/ru_RU.UTF-8/s/^# //g' /etc/locale.gen && locale-gen
ENV LANG=ru_RU.UTF-8 \
    LANGUAGE=ru_RU:ru \
    LC_ALL=ru_RU.UTF-8

# Создание пользователя приложения (безопасность)
RUN groupadd -r django && useradd -r -g django django

# Создание директорий приложения
RUN mkdir -p /app/logs /app/staticfiles /app/media \
    && chown -R django:django /app

# Переключение на рабочую директорию
WORKDIR /app

# Копирование requirements и установка зависимостей
COPY requirements.txt requirements_hosting.txt ./
RUN pip install --upgrade pip setuptools wheel \
    && pip install -r requirements_hosting.txt

# ==========================================
# СТАДИЯ РАЗРАБОТКИ
# ==========================================
FROM base as development

# Дополнительные инструменты для разработки
RUN pip install \
    django-debug-toolbar \
    django-extensions \
    ipython

# Копирование кода
COPY --chown=django:django . .

# Переключение на пользователя django
USER django

# Команда по умолчанию для разработки
CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"]

# ==========================================
# СТАДИЯ ПРОДАКШЕНА
# ==========================================
FROM base as production

# Установка Gunicorn с оптимизациями для Timeweb Cloud
RUN pip install \
    gunicorn[gevent]==21.2.0 \
    gevent==23.9.1 \
    psycopg2-binary==2.9.9 \
    whitenoise==6.6.0

# Копирование entrypoint скрипта
COPY --chown=django:django entrypoint.sh /app/entrypoint.sh
RUN chmod +x /app/entrypoint.sh

# Копирование кода приложения
COPY --chown=django:django . .

# Health check скрипт
RUN cat > /app/healthcheck.py << 'EOF'
#!/usr/bin/env python
import sys
import requests
import os

def health_check():
    try:
        response = requests.get('http://localhost:8000/api/health/', timeout=5)
        if response.status_code == 200:
            print("✅ Backend healthy")
            sys.exit(0)
        else:
            print(f"❌ Backend unhealthy: {response.status_code}")
            sys.exit(1)
    except Exception as e:
        print(f"❌ Health check failed: {e}")
        sys.exit(1)

if __name__ == "__main__":
    health_check()
EOF

RUN chmod +x /app/healthcheck.py

# Настройка прав доступа
RUN chown -R django:django /app

# Переключение на пользователя django
USER django

# Открытие порта
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD python /app/healthcheck.py

# Entrypoint и команда
ENTRYPOINT ["/app/entrypoint.sh"]

# Команда по умолчанию с оптимизацией для Timeweb Cloud
CMD ["gunicorn", \
     "labosfera_project.wsgi:application", \
     "--bind", "0.0.0.0:8000", \
     "--workers", "4", \
     "--worker-class", "gevent", \
     "--worker-connections", "1000", \
     "--max-requests", "1000", \
     "--max-requests-jitter", "100", \
     "--timeout", "30", \
     "--keep-alive", "2", \
     "--log-level", "info", \
     "--access-logfile", "-", \
     "--error-logfile", "-", \
     "--capture-output", \
     "--enable-stdio-inheritance"]

# ==========================================
# ОПТИМИЗАЦИИ ДЛЯ TIMEWEB CLOUD
# ==========================================

# ✅ Многоступенчатая сборка для минимизации размера
# ✅ Python 3.12 для максимальной производительности
# ✅ Gevent workers для высокой нагрузки
# ✅ Русская локализация
# ✅ Health checks для мониторинга
# ✅ Оптимизированный Gunicorn для NVMe дисков
# ✅ Автоматические миграции и сбор статики
# ✅ Безопасность (non-root пользователь)
# ✅ Логирование для отладки
# ✅ Кэширование pip зависимостей

# СБОРКА:
# docker build -f Dockerfile.timeweb -t labosfera-backend:timeweb .

# РАЗРАБОТКА:
# docker build -f Dockerfile.timeweb --target development -t labosfera-backend:dev .

# ПРОДАКШЕН:
# docker build -f Dockerfile.timeweb --target production -t labosfera-backend:prod .