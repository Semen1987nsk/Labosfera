# Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
import requests
from django.conf import settings
from typing import Optional

class TelegramNotifier:
    def __init__(self):
        self.bot_token = getattr(settings, 'TELEGRAM_BOT_TOKEN', None)
        self.chat_id = getattr(settings, 'TELEGRAM_CHAT_ID', None)
        self.api_url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
    
    def send_message(self, text: str, parse_mode: str = 'HTML') -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        if not self.bot_token or not self.chat_id:
            print("Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã")
            return False
        
        data = {
            'chat_id': self.chat_id,
            'text': text,
            'parse_mode': parse_mode,
            'disable_web_page_preview': True
        }
        
        try:
            response = requests.post(self.api_url, json=data, timeout=10)
            response.raise_for_status()
            return True
        except requests.exceptions.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return False

def format_order_message(order) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ"""
    message = f"""
üõí <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑ #{order.id}</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b>
‚Ä¢ –ò–º—è: {order.name}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {order.phone}
‚Ä¢ Email: {order.email}

üè¢ <b>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:</b> {order.organization or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}

üì¶ <b>–¢–æ–≤–∞—Ä—ã:</b> {order.total_items} —à—Ç.
üí∞ <b>–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—É–º–º–∞:</b> {f'{order.estimated_total:,.0f} ‚ÇΩ' if order.estimated_total else '–ù–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞'}

üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>
{order.message or '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}

üìù <b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>
"""
    
    for item in order.items.all():
        price_info = f" ({item.price_at_order:,.0f} ‚ÇΩ)" if item.price_at_order else ""
        message += f"‚Ä¢ {item.product.name} - {item.quantity} —à—Ç.{price_info}\n"
    
    message += f"\n‚è∞ <b>–í—Ä–µ–º—è:</b> {order.created_at.strftime('%d.%m.%Y %H:%M')}"
    
    return message

def format_contact_message(contact) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–±—Ä–∞—â–µ–Ω–∏–∏"""
    message = f"""
üìû <b>–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ #{contact.id}</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b>
‚Ä¢ –ò–º—è: {contact.name}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {contact.phone}
‚Ä¢ Email: {contact.email or '–ù–µ —É–∫–∞–∑–∞–Ω'}

üè¢ <b>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:</b> {contact.organization or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
üìã <b>–¢–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è:</b> {contact.get_request_type_display()}

üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>
{contact.message}

‚è∞ <b>–í—Ä–µ–º—è:</b> {contact.created_at.strftime('%d.%m.%Y %H:%M')}
"""
    
    return message

def send_order_notification(order) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ"""
    notifier = TelegramNotifier()
    message = format_order_message(order)
    return notifier.send_message(message)

def send_contact_notification(contact) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±—Ä–∞—â–µ–Ω–∏–∏"""
    notifier = TelegramNotifier()
    message = format_contact_message(contact)
    return notifier.send_message(message)